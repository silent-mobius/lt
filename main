#!/usr/bin/env bash
######################################################
#created by: Serge
#edited by: Alex M. Schapelle
#purpose: build pdf or html files for linux-training learning material
#version; v1.9.35
#####################################################

. ./lib/build/vars
. ./lib/build/funcs


main(){
while getopts "d: h" option
do
	case $option in
		d ) 	OPTDEBUG=$OPTARG
			shift 2
			;;
		h ) 	help
			shift 1
			exit 0
			;;
        esac
done

cmd=$1
book=$2

case $OPTDEBUG in
	0)	# DEBUG 0 is zero output (except help message)
		REDIR=">$redirfile 2>&1"
		;;
	"" | 1)	# DEBUG 1 is default, only STDOUT
		REDIR="2>$redirfile"
		;;
	2)	# DEBUG 2 is all output we get normally
		REDIR=""
		;;
	3)	# DEBUG 3 is all output we get normally + verbose flag everywhere
		REDIR=""
		V="-v"
		;;
	4)	# DEBUG 4 is all output we get normally + fop exec debug on + verbose flag everywhere
		REDIR=""
		EXECDEBUG="--execdebug"
		V="-v"
		;;
	*)	help
		exit 0
		;;
esac

##############

check_ROOTDIR || exit 1

books=($( cd $BOOKSDIR ; find * -maxdepth 1 -type d))
superbooks=($( cd $BOOKSDIR ; find * -maxdepth 1 -type d | grep -v minibook ))
minibooks=($( cd $BOOKSDIR ; find * -maxdepth 1 -type d | grep minibook))

mkdir -p $OUTPUTDIR

# Redirect everything according to REDIR var from now on.
#eval "exec $REDIR"

# Main loop
case "$cmd" in
  clean)
	clean
	;;
  build)
	check_os_type
	clean
	[[ -x "$(which fop)" ]] || echor "fop not installed." || exit 1
	check_book
	deco "Building '$book' book."
	build_xml
	deco "Generating pdf for '$book' book."
	build_pdf
	deco "Done generating pdf $OUTPUTDIR/book.pdf -> $pdffile"
	;;
  html)
	[[ -x "$(which xmlto)" ]] || echor "xmlto not installed."|| exit 1
	clean
	check_book
	deco "Building '$book' book."
	build_xml
	deco "Generating html for '$book' book."
	build_html
 	deco "Done Generating html for '$book' book."
	;;
  *)
	help
	;;

esac

}






##################################
main "$@"
