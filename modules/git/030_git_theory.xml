<?hard-pagebreak?>
<section><title>git</title>
	<para>Linus Torvalds created <command>git</command><indexterm><primary>git</primary></indexterm> back in 2005 when Bitkeeper changed its license 
	and the Linux kernel developers where no longer able to use it for free.</para>
	<para><command>git</command> quickly became popular and is now the most widely used <command>distributed version control</command> system in the world.</para>
	<para>Geek and Poke demonstrates why we need version control (image property of Geek and Poke CCA 3.0).</para>
 	<para><mediaobject><imageobject><imagedata fileref="../images/version_control.jpg" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<!--NOT REALLY SURE WHAT TO DO WITH THIS LINE ?<para>Besides <command>source code</command> for software, you can also find German and Icelandic <command>law</command> on github (and probably much more by the time you are reading this).</para> -->
</section>
<?hard-pagebreak?>
<section><title>installing git</title>
	<para>When it comes to installing git, there is various ways to do it, like with any software on any Linux distribution:
	 apt, yum/dnf, pacman, emerge or binaries compilation. (In case you do not know what all of these are, then we suggest to seek them on wikipedia)</para>
	<para>In this chapter we'll be using Debian, so we'll install <command>git</command> with <command>apt install git</command><indexterm><primary>apt</primary></indexterm> 
	as seen in this screenshot on Debian 10.</para>
	<screen>root@debian10:~# apt install git
The following NEW packages will be installed:
  git libcurl3-gnutls{a} liberror-perl{a}
0 packages upgraded, 3 newly installed, 0 to remove and 0 not upgraded.
...
Processing triggers for man-db ...
Setting up libcurl3-gnutls (7.21.0-2.1+squeeze2) ...
Setting up liberror-perl (0.17-1) ...
Setting up git (1:1.7.2.5-3) ...</screen>
</section>
<section><title>starting a project</title>
	<para>As mentioned, <command>git</command> needs a type of software source code to keep track of, that is why we'll need a project to work on.
	First we create a project directory, with a simple file in it.</para>
	<screen>paul@debian10~$ mkdir project42
paul@debian10~$ cd project42/
paul@debian10~/project42$ echo "echo The answer is 42." &#062;&#062; question.sh</screen>
<section><title>git init</title>
	<para>Once the project is created with some software files, then we use <command>git init</command> to create a <command>local</command> git repository in this directory.</para>
	<screen>paul@debian10~/project42$ ls -la
total 12
drwxrwxr-x  2 paul paul 4096 Dec  8 16:41 .
drwxr-xr-x 46 paul paul 4096 Dec  8 16:41 ..
-rw-rw-r--  1 paul paul   23 Dec  8 16:41 question.sh
paul@debian10~/project42$ git init
Initialized empty Git repository in /home/paul/project42/.git/
paul@debian10~/project42$ ls -la
total 16
drwxrwxr-x  3 paul paul 4096 Dec  8 16:44 .
drwxr-xr-x 46 paul paul 4096 Dec  8 16:41 ..
drwxrwxr-x  7 paul paul 4096 Dec  8 16:44 .git
-rw-rw-r--  1 paul paul   23 Dec  8 16:41 question.sh</screen>
</section>
<section><title>git config</title>
	<para>As emphesized in previous paragraph, the repository that we creted and initialized, is local repository. In order to save it remotely we'll need to use
	remote server that we suggested at the begining of this chapter. To configure access to remote repository, we use <command>git config</command> with <command>--global</command> option,
	 for configuration tobe applied on whole OS level.</para>
	<screen>paul@debian10$ git config --global user.name Paul
paul@debian10$ git config --global user.email "paul.cobbaut@gmail.com"
paul@debian10$ git config --global core.editor vi</screen>
	<para>We can verify these configuration in in home folder of our user, under a hidden file <command>~/.gitconfig</command> :</para>
	<screen>paul@debian10~/project42$ cat ~/.gitconfig
[user]
	name = Paul
	email = paul.cobbaut@gmail.com
[core]
	editor = vi</screen>

<para>In case you will not be using <command>--global</command> while configuring the <command>git</command> client, then the  hidden file at your home folder will <command>NOT</command> appear.
In that case, in the project file itself you'll find a hidden folder name <command>~/project42/.git</command>. In that folder, there will be a configuration file named <command>config</command>.
The file is the same configuration file as in  <command>~/.gitconfig</command>, but unlike it, this one is only a local configuration file for the project itself.
</para>

</section>

<section>
	<title>git workflow</title>
	<para>
	A Git Workflow is a recipe or recommendation for how to use Git to accomplish work in a consistent and productive manner.
	In simple terms, git workflow attempts to insulate code bases and prevent problems before they happen.  
	Our local repository consists of three "trees" maintained by git. The first one is your <command>Working Directory</command> of our project,
	which holds the actual files. The second one is the <command>Index</command> which acts as a staging area and finally the <command>HEAD</command> which points to the last commit you've made.
    <mediaobject><imageobject><imagedata fileref="../images/git_basic_flow.png" format="EPS" align="center"></imagedata></imageobject></mediaobject>

	</para>
</section>

<section><title>git add</title>
	<para>The time has come: now we dive in to practicality of <command>git</command>: In order to follow up on the development of the project,
	 its files, libraries and so on, we need to add file to our project with <command>git add</command>, and verify that it is added with
	<command>git status</command>.</para>
	<screen>paul@debian10~/project42$ git add question.sh
paul@debian10~/project42$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached &#060;file&#062;..." to unstage)
#
#	new file:   question.sh
#</screen>
	<para>The <command>git status</command> tells us there is a new file ready to be committed.</para>
</section>
<section><title>git commit</title>
	<para>With <command>git commit</command> you force git to record all added files (and all changes to those files) permanently.</para>
	<screen>paul@debian10~/project42$ git commit -m "starting a project"
[master (root-commit) 5c10768] starting a project
 1 file changed, 1 insertion(+)
 create mode 100644 question.sh
paul@debian10~/project42$ git status
# On branch master
nothing to commit (working directory clean)</screen>
</section>
<section><title>changing a committed file</title>
	<para>The screenshots below show several steps. First we change a file:</para>
	<screen>paul@debian10~/project42$ git status
# On branch master
nothing to commit (working directory clean)
paul@debian10~/project42$ vi question.sh </screen>
	<para>Then we verify the status and see that it is modified:</para>
	<screen>paul@debian10~/project42$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add &#060;file&#062;..." to update what will be committed)
#   (use "git checkout -- &#060;file&#062;..." to discard changes in working directory)
#
#	modified:   question.sh
#
no changes added to commit (use "git add" and/or "git commit -a")</screen>
	<para>Next we add it to the git repository.</para>
	<screen>paul@debian10~/project42$ git add question.sh
paul@debian10~/project42$ git commit -m "adding a she-bang to the main script"
[master 86b8347] adding a she-bang to the main script
 1 file changed, 1 insertion(+)
paul@debian10~/project42$ git status
# On branch master
nothing to commit (working directory clean)</screen>
</section>
<section><title>git log</title>
	<para>We can see all our commits again using <command>git log</command>.</para>
	<screen>paul@debian10~/project42$ git log
commit 86b8347192ea025815df7a8e628d99474b41fb6c
Author: Paul &#060;paul.cobbaut@gmail.com&#062;
Date:   Sat Dec 8 17:12:24 2012 +0100

    adding a she-bang to the main script

commit 5c10768f29aecc16161fb197765e0f14383f7bca
Author: Paul &#060;paul.cobbaut@gmail.com&#062;
Date:   Sat Dec 8 17:09:29 2012 +0100

    starting a project</screen>
	<para>The log format can be changed.</para>
	<screen>paul@debian10~/project42$ git log --pretty=oneline
86b8347192ea025815df7a8e628d99474b41fb6c adding a she-bang to the main script
5c10768f29aecc16161fb197765e0f14383f7bca starting a project</screen>
	<para>The log format can be customized a lot.</para>
	<screen>paul@debian10~/project42$ git log --pretty=format:"%an: %ar :%s"
Paul: 8 minutes ago :adding a she-bang to the main script
Paul: 11 minutes ago :starting a project</screen>
</section>
<section><title>git mv</title>
	<para>Renaming a file can be done with <command>mv</command> followed by a <command>git remove</command> and a <command>git add</command> of the new filename. But it can be done easier and in one command using <command>git mv</command>.</para>
	<screen>paul@debian10~/project42$ git mv question.sh thequestion.sh
paul@debian10~/project42$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &#060;file&#062;..." to unstage)
#
#	renamed:    question.sh -> thequestion.sh
#
paul@debian10~/project42$ git commit -m "improved naming scheme"
[master 69b2c8b] improved naming scheme
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename question.sh => thequestion.sh (100%)</screen>
</section>
</section>
<?hard-pagebreak?>
<section><title>git branches</title>
	<para>Working on the project can be done in one or more <command>git branches</command>. Here we create a new branch that will make changes to the script. We will <command>merge</command> this branch with the <command>master branch</command> when we are sure the script works. (It can be useful to add <command>git status</command> commands when practicing).</para>
	<screen>paul@debian10~/project42$ git branch
* master
paul@debian10~/project42$ git checkout -b newheader
Switched to a new branch 'newheader'
paul@debian10~/project42$ vi thequestion.sh 
paul@debian10~/project42$ git add thequestion.sh
paul@debian10~/project42$ source thequestion.sh 
The answer is 42.</screen>
	<para>It seems to work, so we commit in this branch.</para>
	<screen>paul@debian10~/project42$ git commit -m "adding a new company header"
[newheader 730a22b] adding a new company header
 1 file changed, 4 insertions(+)
paul@debian10~/project42$ git branch
  master
* newheader
paul@debian10~/project42$ cat thequestion.sh 
#!/bin/bash
#
# copyright linux-training.be
#

echo The answer is 42.</screen>
	<para>Let us go back to the master branch and see what happened there.</para>
	<screen>paul@debian10~/project42$ git checkout master
Switched to branch 'master'
paul@debian10~/project42$ cat thequestion.sh 
#!/bin/bash
echo The answer is 42.</screen>
	<para>Nothing happened in the master branch, because we worked in another branch.</para>
	<para>When we are sure the branch is ready for production, then we merge it into the master branch.</para>
	<screen>paul@debian10~/project42$ cat thequestion.sh 
#!/bin/bash
echo The answer is 42.
paul@debian10~/project42$ git merge newheader
Updating 69b2c8b..730a22b
Fast-forward
 thequestion.sh |    4 ++++
 1 file changed, 4 insertions(+)
paul@debian10~/project42$ cat thequestion.sh 
#!/bin/bash
#
# copyright linux-training.be
#

echo The answer is 42.</screen>
	<para>The newheader branch can now be deleted.</para>
	<screen>paul@debian10~/project42$ git branch
* master
  newheader
paul@debian10~/project42$ git branch -d newheader
Deleted branch newheader (was 730a22b).
paul@debian10~/project42$ git branch
* master</screen>
</section>
<section><title>to be continued...</title>
	<para>The <command>git</command> story is not finished.</para>
	<para>There are many excellent online tutorials for <command>git</command>. <!-- THIS IS A REPETITION: DO WE NEED IT ? This list can save you one Google query:</para>
	<screen>http://gitimmersion.com/
http://git-scm.com/book</screen>
</section>
-->




<?hard-pagebreak?>
<section><title>remote server</title>
	<para>As mentioned since the beginning of this chapter, we need a remote server so we could save our project changes an even for more future development needs.
	 We have chosen the <command>gitlab.com</command> for this purpose, yet it needs to be said that there many other options, worth checking out.</para>
	<para>We start by creating an account on <command>gitlab.com</command><indexterm><primary>gitlab</primary></indexterm>.
	 This website is a frontend for an immense git server with lots of Open and Closed projects in various programming languages and documentaion.</para>
	<screen>https://gitlab.com/users/sign_in</screen>
	<para>Gitlab accounts are free of charge as of now, and besides they provide selfhosted version which is fully opensource. we will be using it in our examples below.</para>
</section>
<section><title>public key authentication with gitlab</title>
	<para>Usually when even you have set the account with git config command, the method of your athentication is via https protocol, with the username and password that you have setup when you signed in to the gitlab site. </para>
	<para>Due to hassel, we prefer to setup passwordless <command>ssh public key</command><indexterm><primary>ssh public key</primary></indexterm>, and to push or pull changes of our project on <command>gitlab.com</command> .</para>
	<para>here is an example of ssh key generaion:</para>
	<screen>paul@debian10~/project42$ ssh-keygen -t rsa -b 4096
Generating public/private rsa key pair.
Enter file in which to save the key (/home/paul/.ssh/id_rsa):
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in id_rsa.
Your public key has been saved in id_rsa.pub.
The key fingerprint is:
SHA256:tbXg05GTOAd2CbsZc20NYQlzAzfNj63DVpct5vuD+Q4 paul.cobbot@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|          +.=+O= |
|         . =.O.=o|
|          O O oo=|
|         o & =+.*|
|        S * o+ +.|
|           .  *  |
|             Eoo |
|             oo. |
|              o+o|
+----[SHA256]-----+
paul@debian10~/project42$</screen>
	<para>Once the file is created, it is usually saved at <command>.ssh</command>folder at your users home directory.
	 You can copy the the content of yout public key (id_rsa.pub) to your gitlab account settings</para>
	<para><mediaobject><imageobject><imagedata fileref="../images/github_pubkey.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
	<para>You can upload your own key via the web interface:</para>
	<screen>https://gitlab.com/settings/ssh</screen>
	<para>Please do not forget to protect your <command>private key</command>!</para>
</section>

