<?hard-pagebreak?>
<section><title>installing mysql</title>
	<para>On Debian/Ubuntu you can use <command>apt install mysql-server</command><indexterm><primary>apt(8)</primary></indexterm> to install the <command>mysql server</command><indexterm><primary>mysql-server</primary></indexterm> and <command>client</command><indexterm><primary>mysql-client</primary></indexterm>.</para>
	<screen>root@ubu1204~# apt install mysql-server
The following NEW packages will be installed:
  libdbd-mysql-perl{a} libdbi-perl{a} libhtml-template-perl{a}
  libnet-daemon-perl{a} libplrpc-perl{a} mysql-client-5.5{a} 
  mysql-client-core-5.5{a} mysql-server mysql-server-5.5{a}
  mysql-server-core-5.5{a} 
0 packages upgraded, 10 newly installed, 0 to remove and 1 not upgraded.
Need to get 25.5 MB of archives. After unpacking 88.4 MB will be used.
Do you want to continue? [Y/n/?]</screen>
	<para>During the installation you will be asked to provide a password for the <command>root mysql user</command><indexterm><primary>root(mysql)</primary></indexterm>, remember this password (or use <command>hunter2</command> like i do.</para>
	<para>To verify the installed version, use <command>dpkg -l</command><indexterm><primary>dpkg(1)</primary></indexterm> on Debian/Ubuntu. This screenshot shows version 5.0 installed.</para>
	<screen>root@ubu1204~# dpkg -l mysql-server | tail -1 | tr -s ' ' | cut -c-72
ii mysql-server 5.5.24-0ubuntu0.12.04.1 MySQL database server (metapacka</screen>
	<para>Issue <command>rpm -q</command><indexterm><primary>rpm(1)</primary></indexterm> to get version information about MySQL on Red Hat/Fedora/CentOS.</para>
	<screen>[paul@RHEL52 ~]$ rpm -q mysql-server
mysql-server-5.0.45-7.el5</screen>
	<para>You will need at least version 5.0 to work with <command>triggers</command><indexterm><primary>triggers(mysql)</primary></indexterm>.</para>
</section>
<?hard-pagebreak?>
<section><title>accessing mysql</title>
	<section><title>Linux users</title>
		<para>The installation of <command>mysql</command><indexterm><primary>mysql(user)</primary></indexterm> creates a user account in <command>/etc/passwd</command><indexterm><primary>/etc/passwd</primary></indexterm> and a group account<indexterm><primary>mysql(group)</primary></indexterm> in <command>/etc/group</command><indexterm><primary>/etc/group</primary></indexterm>.</para>
		<screen>kevin@ubu1204:~$ tail -1 /etc/passwd
mysql:x:120:131:MySQL Server,,,:/nonexistent:/bin/false
kevin@ubu1204:~$ tail -1 /etc/group
mysql:x:131:</screen>
		<para>The mysql daemon <command>mysqld</command><indexterm><primary>mysqld</primary></indexterm> will run with the credentials of this user and group.</para>
	<screen>root@ubu1204~# ps -eo uid,user,gid,group,comm | grep mysqld
  120 mysql      131 mysql    mysqld</screen>
	</section>
	<section><title>mysql client application</title>
		<para>You can now use mysql from the commandline by just typing <command>mysql -u root -p</command><indexterm><primary>mysql</primary></indexterm> and you 'll be asked for the password (of the <command>mysql root</command> account). In the screenshot below the user typed <command>exit</command> to exit the mysql console.</para>
		<screen>root@ubu1204~# mysql -u root -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 43
Server version: 5.5.24-0ubuntu0.12.04.1 (Ubuntu)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&#062; <command>exit</command>
Bye</screen>
		<para>You could also put the password in clear text on the command line, but that would not be very secure. Anyone with access to your bash history would be able to read your mysql root password.</para>
		<screen>root@ubu1204~# mysql -u root -phunter2
Welcome to the MySQL monitor.  Commands end with ; or \g.
...</screen>
	</section>
<?hard-pagebreak?>
	<section><title>~/.my.cnf</title>
		<para>You can save configuration in your home directory in the hidden file <command>.my.cnf</command><indexterm><primary>.my.cnf</primary></indexterm>. In the screenshot below we put the root user and password in .my.cnf.</para>
		<screen>kevin@ubu1204:~$ pwd
/home/kevin
kevin@ubu1204:~$ cat .my.cnf 
[client]
user=root
password=hunter2
kevin@ubu1204:~$</screen>
	<para>This enables us to log on as the <command>root mysql</command> user just by typing <command>mysql</command>.</para>
<screen>kevin@ubu1204:~$ mysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 56
Server version: 5.5.24-0ubuntu0.12.04.1 (Ubuntu)</screen>
	</section>
	<section><title>the mysql command line client</title>
		<para>You can use the <command>mysql</command><indexterm><primary>mysql</primary></indexterm> command to take a look at the databases, and to execute SQL queries on them. The screenshots below show you how.</para>
		<para>Here we execute the command <command>show databases</command>. Every command must be terminated by a delimiter. The default delimiter is <command>;</command> (the semicolon).</para>
		<screen>mysql&#062; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)</screen>
		<para>We will use this prompt in the next sections.</para>
	</section>
</section>
<?hard-pagebreak?>
<section><title>mysql databases</title>
	<section><title>listing all databases</title>
		<para>You can use the <command>mysql</command><indexterm><primary>mysql</primary></indexterm> command to take a look at the databases, and to execute SQL queries on them. The screenshots below show you how. First, we log on to our MySQL server and execute the command <command>show databases</command><indexterm><primary>show(mysql)</primary></indexterm> to see which databases exist on our mysql server.</para>
		<screen>kevin@ubu1204:~$ mysql
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 57
Server version: 5.5.24-0ubuntu0.12.04.1 (Ubuntu)

Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&#062; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)</screen>
	</section>
	<section><title>creating a database</title>
		<para>You can create a new database with the <command>create database</command><indexterm><primary>create(mysql)</primary></indexterm> command.</para>
		<screen>mysql&#062; create database famouspeople;
Query OK, 1 row affected (0.00 sec)

mysql&#062; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| famouspeople       |
| mysql              |
| performance_schema |
| test               |
+--------------------+
5 rows in set (0.00 sec)</screen>
	</section>
<?hard-pagebreak?>
	<section><title>using a database</title>
		<para>Next we tell <command>mysql</command> to use one particular database with the <command>use $database</command><indexterm><primary>use(mysql)</primary></indexterm> command. This screenshot shows how to make wikidb the current database (in use).</para>
		<screen>mysql&#062; use famouspeople;
Database changed
mysql&#062;</screen>
	</section>
	<section><title>access to a database</title>
		<para>To give someone access to a mysql database, use the <command>grant</command><indexterm><primary>grant(mysql)</primary></indexterm> command.</para>
		<screen>mysql&#0062; grant all on famouspeople.* to kevin@localhost IDENTIFIED BY "hunter2";
Query OK, 0 rows affected (0.00 sec)</screen>
	</section>
	<section><title>deleting a database</title>
		<para>When a database is no longer needed, you can permanently remove it with the <command>drop database</command><indexterm><primary>drop(mysql)</primary></indexterm> command.</para>
		<screen>mysql&#062; drop database demodb;
Query OK, 1 row affected (0.09 sec)
		</screen>
	</section>
	<section><title>backup and restore a database</title>
		<para>You can take a backup of a database, or move it to another computer using the <command>mysql</command> and <command>mysqldump</command> commands. In the screenshot below, we take a backup of the wikidb database on the computer named laika.</para>
		<screen>mysqldump -u root famouspeople &#062; famouspeople.backup.20120708.sql</screen>
		<para>Here is a screenshot of a database restore operation from this backup.</para>
		<screen>mysql -u root famouspeople &#060; famouspeople.backup.20120708.sql</screen>
	</section>
</section>
<?hard-pagebreak?>
<section><title>mysql tables</title>
<section><title>listing tables</title>
	<para>You can see a list of tables in the current database with the <command>show tables;</command><indexterm><primary>show(mysql)</primary></indexterm> command. Our <command>famouspeople</command> database has no tables yet.</para>
	<screen>mysql&#062; use famouspeople;
Database changed
mysql&#062; show tables;
Empty set (0.00 sec)</screen>
</section>
<section><title>creating a table</title>
	<para>The <command>create table</command><indexterm><primary>create(mysql)</primary></indexterm> command will create a new table.</para>
	<para>This screenshot shows the creation of a country table. We use the <command>countrycode</command> as a <command>primary key</command> (all country codes are uniquely defined). Most country codes are two or three letters, so a <command>char</command><indexterm><primary>char(mysql)</primary></indexterm> of three uses less space than a <command>varchar</command><indexterm><primary>varchar(mysql)</primary></indexterm> of three. The <command>country name</command> and the name of the capital are both defined as <command>varchar</command>. The population can be seen as an <command>integer</command><indexterm><primary>integer(mysql)</primary></indexterm>.</para>
	<screen>mysql&#062; create table country (
    -&#062; countrycode char(3) NOT NULL,
    -&#062; countryname varchar(70) NOT NULL,
    -&#062; population int,
    -&#062; countrycapital varchar(50),
    -&#062; primary key (countrycode)
    -&#062; );
Query OK, 0 rows affected (0.19 sec)

mysql&#062; show tables;
+------------------------+
| Tables_in_famouspeople |
+------------------------+
| country                |
+------------------------+
1 row in set (0.00 sec)

mysql&#062;</screen>
	<para>You are allowed to type the <command>create table</command> command on one long line, but administrators often use multiple lines to improve readability.</para>
	<screen>mysql&#062; create table country ( countrycode char(3) NOT NULL, countryname\
 varchar(70) NOT NULL, population int, countrycapital varchar(50), prim\
ary key (countrycode) );
Query OK, 0 rows affected (0.18 sec)</screen>
</section>
<?hard-pagebreak?>
<section><title>describing a table</title>
	<para>To see a description of the structure of a table, issue the <command>describe $tablename</command><indexterm><primary>describe(mysql)</primary></indexterm> command as shown below.</para>
	<screen>mysql> describe country;
+----------------+-------------+------+-----+---------+-------+
| Field          | Type        | Null | Key | Default | Extra |
+----------------+-------------+------+-----+---------+-------+
| countrycode    | char(3)     | NO   | PRI | NULL    |       |
| countryname    | varchar(70) | NO   |     | NULL    |       |
| population     | int(11)     | YES  |     | NULL    |       |
| countrycapital | varchar(50) | YES  |     | NULL    |       |
+----------------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)</screen>
</section>
<section><title>removing a table</title>
	<para>To remove a table from a database, issue the <command>drop table $tablename</command><indexterm><primary>drop(mysql)</primary></indexterm> command as shown below.</para>
	<screen>mysql&#062; drop table country;
Query OK, 0 rows affected (0.00 sec)</screen>
</section>
</section>
<?hard-pagebreak?>
<section><title>mysql records</title>
	<section><title>creating records</title>
		<para>Use <command>insert</command><indexterm><primary>insert(mysql)</primary></indexterm> to enter data into the table. The screenshot shows several insert statements that insert values depending on the position of the data in the statement.</para>
		<screen>mysql&#062; insert into country values ('BE','Belgium','11000000','Brussels');
Query OK, 1 row affected (0.05 sec)

mysql&#062; insert into country values ('DE','Germany','82000000','Berlin');
Query OK, 1 row affected (0.05 sec)

mysql&#062; insert into country values ('JP','Japan','128000000','Tokyo');
Query OK, 1 row affected (0.05 sec)</screen>
		<para>Some administrators prefer to use uppercase for <command>sql</command><indexterm><primary>SQL</primary></indexterm> keywords. The mysql client accepts both.</para>
		<screen>mysql&#062; INSERT INTO country VALUES ('FR','France','64000000','Paris');
Query OK, 1 row affected (0.00 sec)</screen>
		<para>Note that you get an error when using a duplicate <command>primary key</command>.</para>
		<screen>mysql&#062; insert into country values ('DE','Germany','82000000','Berlin');
ERROR 1062 (23000): Duplicate entry 'DE' for key 'PRIMARY'</screen>
	</section>
	<section><title>viewing all records</title>
		<para>Below an example of a simple <command>select</command><indexterm><primary>select(mysql)</primary></indexterm> query to look at the contents of a table.</para>
		<screen>mysql&#062; select * from country;
+-------------+---------------+------------+----------------+
| countrycode | countryname   | population | countrycapital |
+-------------+---------------+------------+----------------+
| BE          | Belgium       |   11000000 | Brussels       |
| CN          | China         | 1400000000 | Beijing        |
| DE          | Germany       |   82000000 | Berlin         |
| FR          | France        |   64000000 | Paris          |
| IN          | India         | 1300000000 | New Delhi      |
| JP          | Japan         |  128000000 | Tokyo          |
| MX          | Mexico        |  113000000 | Mexico City    |
| US          | United States |  313000000 | Washington     |
+-------------+---------------+------------+----------------+
8 rows in set (0.00 sec)</screen>
	</section>
<?hard-pagebreak?>
	<section><title>updating records</title>
		<para>Consider the following <command>insert</command> statement. The capital of Spain is not Barcelona, it is Madrid.</para>
		<screen>mysql&#062; insert into country values ('ES','Spain','48000000','Barcelona');
Query OK, 1 row affected (0.08 sec)</screen>
		<para>Using an <command>update</command><indexterm><primary>update(mysql)</primary></indexterm> statement, the record can be updated.</para>
	<screen>mysql&#062; update country set countrycapital='Madrid' where countrycode='ES';
Query OK, 1 row affected (0.07 sec)
Rows matched: 1  Changed: 1  Warnings: 0</screen>
	<para>We can use a <command>select</command><indexterm><primary>select(mysql)</primary></indexterm> statement to verify this change.</para>
	<screen>mysql&#062; select * from country;
+-------------+---------------+------------+----------------+
| countrycode | countryname   | population | countrycapital |
+-------------+---------------+------------+----------------+
| BE          | Belgium       |   11000000 | Brussels       |
| CN          | China         | 1400000000 | Beijing        |
| DE          | Germany       |   82000000 | Berlin         |
| ES          | Spain         |   48000000 | Madrid         |
| FR          | France        |   64000000 | Paris          |
| IN          | India         | 1300000000 | New Delhi      |
| JP          | Japan         |  128000000 | Tokyo          |
| MX          | Mexico        |  113000000 | Mexico City    |
| US          | United States |  313000000 | Washington     |
+-------------+---------------+------------+----------------+
9 rows in set (0.00 sec)</screen>
	</section>
	<section><title>viewing selected records</title>
		<para>Using a <command>where</command> clause in a <command>select</command><indexterm><primary>select(mysql)</primary></indexterm> statement, you can specify which record(s) you want to see.</para>
		<screen>mysql&#062; SELECT * FROM country WHERE countrycode='ES';
+-------------+-------------+------------+----------------+
| countrycode | countryname | population | countrycapital |
+-------------+-------------+------------+----------------+
| ES          | Spain       |   48000000 | Madrid         |
+-------------+-------------+------------+----------------+
1 row in set (0.00 sec)</screen>
		<para>Another example of the <command>where</command> clause.</para>
		<screen>mysql> select * from country where countryname='Spain';
+-------------+-------------+------------+----------------+
| countrycode | countryname | population | countrycapital |
+-------------+-------------+------------+----------------+
| ES          | Spain       |   48000000 | Madrid         |
+-------------+-------------+------------+----------------+
1 row in set (0.00 sec)</screen>
	</section>
	<section><title>primary key in where clause ?</title>
		<para>The <command>primary key</command> of a table is a field that uniquely identifies every record (every row) in the table. when using another field in the <command>where</command> clause, it is possible to get multiple rows returned.</para>
		<screen>mysql&#062; insert into country values ('EG','Egypt','82000000','Cairo');
Query OK, 1 row affected (0.33 sec)

mysql> select * from country where population='82000000';
+-------------+-------------+------------+----------------+
| countrycode | countryname | population | countrycapital |
+-------------+-------------+------------+----------------+
| DE          | Germany     |   82000000 | Berlin         |
| EG          | Egypt       |   82000000 | Cairo          |
+-------------+-------------+------------+----------------+
2 rows in set (0.00 sec)</screen>
	</section>
	<section><title>ordering records</title>
		<para>We know that <command>select</command> allows us to see all records in a table. Consider this table.</para>
		<screen>mysql&#062; select countryname,population from country;
+---------------+------------+
| countryname   | population |
+---------------+------------+
| Belgium       |   11000000 |
| China         | 1400000000 |
| Germany       |   82000000 |
| Egypt         |   82000000 |
| Spain         |   48000000 |
| France        |   64000000 |
| India         | 1300000000 |
| Japan         |  128000000 |
| Mexico        |  113000000 |
| United States |  313000000 |
+---------------+------------+
10 rows in set (0.00 sec)</screen>
		<para>Using the <command>order by</command><indexterm><primary>order by(mysql)</primary></indexterm> clause, we can change the order in which the records are presented.</para>
		<screen>mysql&#062; select countryname,population from country order by countryname;
+---------------+------------+
| countryname   | population |
+---------------+------------+
| Belgium       |   11000000 |
| China         | 1400000000 |
| Egypt         |   82000000 |
| France        |   64000000 |
| Germany       |   82000000 |
| India         | 1300000000 |
| Japan         |  128000000 |
| Mexico        |  113000000 |
| Spain         |   48000000 |
| United States |  313000000 |
+---------------+------------+
10 rows in set (0.00 sec)</screen>
	</section>
	<section><title>grouping records</title>
		<para>Consider this table of people. The screenshot shows how to use the <command>avg</command> function to calculate an average.</para>
	<screen>mysql&#062; select * from people;
+-----------------+-----------+-----------+-------------+
| Name            | Field     | birthyear | countrycode |
+-----------------+-----------+-----------+-------------+
| Barack Obama    | politics  | 1961      | US          |
| Deng Xiaoping   | politics  | 1904      | CN          |
| Guy Verhofstadt | politics  | 1953      | BE          |
| Justine Henin   | tennis    | 1982      | BE          |
| Kim Clijsters   | tennis    | 1983      | BE          |
| Li Na           | tennis    | 1982      | CN          |
| Liu Yang        | astronaut | 1978      | CN          |
| Serena Williams | tennis    | 1981      | US          |
| Venus Williams  | tennis    | 1980      | US          |
+-----------------+-----------+-----------+-------------+
9 rows in set (0.00 sec)

mysql&#062; select Field,AVG(birthyear) from people;
+----------+-------------------+
| Field    | AVG(birthyear)    |
+----------+-------------------+
| politics | 1967.111111111111 |
+----------+-------------------+
1 row in set (0.00 sec)</screen>
	<para>Using the <command>group by</command><indexterm><primary>group by(mysql)</primary></indexterm> clause, we can have an average per field.</para>
	<screen>mysql&#062; select Field,AVG(birthyear) from people group by Field;
+-----------+--------------------+
| Field     | AVG(birthyear)     |
+-----------+--------------------+
| astronaut |               1978 |
| politics  | 1939.3333333333333 |
| tennis    |             1981.6 |
+-----------+--------------------+
3 rows in set (0.00 sec)</screen>
	</section>
	<section><title>deleting records</title>
		<para>You can use the <command>delete</command><indexterm><primary>delete(mysql)</primary></indexterm> to permanently remove a record from a table.</para>
		<screen>mysql&#062; delete from country where countryname='Spain';
Query OK, 1 row affected (0.06 sec)

mysql> select * from country where countryname='Spain';
Empty set (0.00 sec)</screen>
	</section>
</section>
<section><title>joining two tables</title>
	<section><title>inner join</title>
		<para>With an <command>inner join</command> you can take values from two tables and combine them in one result. Consider the country and the people tables from the previous section when looking at this screenshot of an <command>inner join</command>.</para>
		<screen>mysql&#062; select Name,Field,countryname
    -&#062; from country
    -&#062; inner join people on people.countrycode=country.countrycode;
+-----------------+-----------+---------------+
| Name            | Field     | countryname   |
+-----------------+-----------+---------------+
| Barack Obama    | politics  | United States |
| Deng Xiaoping   | politics  | China         |
| Guy Verhofstadt | politics  | Belgium       |
| Justine Henin   | tennis    | Belgium       |
| Kim Clijsters   | tennis    | Belgium       |
| Li Na           | tennis    | China         |
| Liu Yang        | astronaut | China         |
| Serena Williams | tennis    | United States |
| Venus Williams  | tennis    | United States |
+-----------------+-----------+---------------+
9 rows in set (0.00 sec)</screen>
		<para>This <command>inner join</command> will show only records with a match on <command>countrycode</command> in both tables.</para>
	</section>
	<section><title>left join</title>
		<para>A <command>left join</command> is different from an <command>inner join</command> in that it will take all rows from the left table, regardless of a match in the right table.</para>
		<screen>mysql> select Name,Field,countryname from country left join people on people.countrycode=country.countrycode;
+-----------------+-----------+---------------+
| Name            | Field     | countryname   |
+-----------------+-----------+---------------+
| Guy Verhofstadt | politics  | Belgium       |
| Justine Henin   | tennis    | Belgium       |
| Kim Clijsters   | tennis    | Belgium       |
| Deng Xiaoping   | politics  | China         |
| Li Na           | tennis    | China         |
| Liu Yang        | astronaut | China         |
| NULL            | NULL      | Germany       |
| NULL            | NULL      | Egypt         |
| NULL            | NULL      | Spain         |
| NULL            | NULL      | France        |
| NULL            | NULL      | India         |
| NULL            | NULL      | Japan         |
| NULL            | NULL      | Mexico        |
| Barack Obama    | politics  | United States |
| Serena Williams | tennis    | United States |
| Venus Williams  | tennis    | United States |
+-----------------+-----------+---------------+
16 rows in set (0.00 sec)</screen>
		<para>You can see that some countries are present, even when they have no matching records in the <command>people</command> table.</para>
	</section>
</section>
<section><title>mysql triggers</title>
<section><title>using a before trigger</title>
	<para>Consider the following <command>create table</command><indexterm><primary>create(mysql)</primary></indexterm> command. The last field (<command>amount</command>) is the multiplication of the two fields named <command>unitprice</command> and <command>unitcount</command>.</para>
	<screen>mysql&#062; create table invoices (
    -&#062; id char(8) NOT NULL,
    -&#062; customerid char(3) NOT NULL,
    -&#062; unitprice int,
    -&#062; unitcount smallint,
    -&#062; amount int );
Query OK, 0 rows affected (0.00 sec)</screen>
	<para>We can let mysql do the calculation for that by using a <command>before trigger</command><indexterm><primary>trigger(mysql)</primary></indexterm>. The screenshot below shows the creation of a trigger that calculates the amount by multiplying two fields that are about to be inserted.</para>
	<screen>mysql&#062; create trigger total_amount before INSERT on invoices
    -&#062; for each row set new.amount = new.unitprice * new.unitcount ;
Query OK, 0 rows affected (0.02 sec)</screen>
	<para>Here we verify that the trigger works by inserting a new record, without providing the total amount.</para>
	<screen>
mysql&#062; insert into invoices values ('20090526','ABC','199','10','');
Query OK, 1 row affected (0.02 sec)
	</screen>
	<para>Looking at the record proves that the trigger works.</para>
	<screen>mysql> select * from invoices;
+----------+------------+-----------+-----------+--------+
| id       | customerid | unitprice | unitcount | amount |
+----------+------------+-----------+-----------+--------+
| 20090526 | ABC        |       199 |        10 |   1990 | 
+----------+------------+-----------+-----------+--------+
1 row in set (0.00 sec)</screen>
</section>
<section><title>removing a trigger</title>
	<para>When a <command>trigger</command> is no longer needed, you can delete it with the <command>drop trigger</command><indexterm><primary>drop(mysql)</primary></indexterm> command.</para>
	<screen>mysql&#062; drop trigger total_amount;
Query OK, 0 rows affected (0.00 sec)</screen>
</section>
</section>
