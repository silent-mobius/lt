<?hard-pagebreak?>
<section><title>router or firewall</title>
	<para>A <command>router</command><indexterm><primary>router</primary></indexterm> is a device that connects two networks. A <command>firewall</command><indexterm><primary>firewall</primary></indexterm> is a device that besides acting as a <command>router</command>, also contains (and implements) rules to determine whether packets are allowed to travel from one network to another. A firewall can be configured to block access based on networks, hosts, protocols and ports. Firewalls can also change the contents of packets while forwarding them.</para>
	<para><mediaobject><imageobject><imagedata fileref="../images/router_or_firewall.png" format="EPS" align="center"></imagedata></imageobject></mediaobject></para>
</section>
<section><title>packet forwarding</title>
	<para><command>Packet forwarding</command> means allowing packets to go from one network to another. When a multihomed host is connected to two different networks, and it allows packets to travel from one network to another through its two network interfaces, it is said to have enabled <command>packet forwarding</command><indexterm><primary>packet forwarding</primary></indexterm>. </para>
</section>
<section><title>packet filtering</title>
	<para><command>Packet filtering</command><indexterm><primary>packet filtering</primary></indexterm> is very similar to packet forwarding, but every packet is individually tested against rules that decide on allowing or dropping the packet. The rules are stored by iptables.</para>
</section>
<section><title>stateful</title>
	<para>A <command>stateful</command><indexterm><primary>stateful firewall</primary></indexterm> firewall is an advancement over stateless firewalls that inspect every individual packet. A stateful firewall will keep a table of active connections, and is knowledgeable enough to recognise when new connections are part of an active session. Linux iptables is a stateful firewall.</para>
</section>
<?hard-pagebreak?>
<section><title>nat (network address translation)</title>
	<para>A <command>nat</command><indexterm><primary>NAT</primary></indexterm> device is a router that is also changing the source and/or target ip-address in packets. It is typically used to connect multiple computers in a private address range (rfc 1918) with the (public) internet. A <command>nat</command> can hide private addresses from the internet.</para>
	<para>It is important to understand that people and vendors do not always use the right term when referring to a certain type of <command>nat</command>. Be sure you talk about the same thing. We can distuinguish several types of <command>nat</command>.</para>
</section>
<section><title>pat (port address translation)</title>
	<para><command>nat</command> often includes <command>pat</command>. A <command>pat</command><indexterm><primary>PAT</primary></indexterm> device is a router that is also changing the source and/or target tcp/udp port in packets. <command>pat</command> is Cisco terminology and is used by <command>snat</command>, <command>dnat</command>, <command>masquerading</command> and <command>port forwarding</command> in Linux. RFC 3022 calls it <command>NAPT</command><indexterm><primary>NAPT</primary></indexterm> and defines the <command>nat/pat</command> combo as "traditional nat". A device sold to you as a nat-device will probably do <command>nat</command> and <command>pat</command>.</para>
</section>
<section><title>snat (source nat)</title>
	<para>A <command>snat</command><indexterm><primary>SNAT</primary></indexterm> device is changing the source ip-address when a packet passes our <command>nat</command>. <command>snat</command> configuration with iptables includes a fixed target source address.</para>
</section>
<section><title>masquerading</title>
	<para><command>Masquerading</command><indexterm><primary>masquerading</primary></indexterm> is a form of <command>snat</command> that will hide the (private) source ip-addresses of your private network using a public ip-address. Masquerading is common on dynamic internet interfaces (broadband modem/routers). Masquerade configuration with iptables uses a dynamic target source address.</para>
</section>
<section><title>dnat (destination nat)</title>
	<para>A <command>dnat</command><indexterm><primary>DNAT</primary></indexterm> device is changing the destination ip-address when a packet passes our <command>nat</command>.</para>
</section>
<section><title>port forwarding</title>
	<para>When static <command>dnat</command> is set up in a way that allows outside connections to enter our private network, then we call it <command>port forwarding</command><indexterm><primary>port forwarding</primary></indexterm>.</para>
</section>
<?hard-pagebreak?>
<section><title>/proc/sys/net/ipv4/ip_forward</title>
	<para>Whether a host is forwarding packets is defined in <command>/proc/sys/net/ipv4/ip_forward</command><indexterm><primary>/proc/sys/net/ipv4/ip_forward</primary></indexterm>. The following screenshot shows how to enable packet forwarding on Linux.</para>
	<screen>
root@router~# echo 1 &#062; /proc/sys/net/ipv4/ip_forward
	</screen>
	<para>The next command shows how to disable packet forwarding.</para>
	<screen>
root@router~# echo 0 &#062; /proc/sys/net/ipv4/ip_forward
	</screen>
	<para>Use cat to check if packet forwarding is enabled.</para>
	<screen>
root@router~# cat /proc/sys/net/ipv4/ip_forward
	</screen>
</section>
<section><title>/etc/sysctl.conf</title>
	<para>By default, most Linux computers are not configured for automatic packet forwarding. To enable packet forwarding whenever the system starts, change the <command>net.ipv4.ip_forward</command> variable in <command>/etc/sysctl.conf</command><indexterm><primary>/etc/sysctl.conf</primary></indexterm> to the value 1.</para>
	<screen>root@router~# grep ip_forward /etc/sysctl.conf 
net.ipv4.ip_forward = 0</screen>
</section>
<section><title>sysctl</title>
	<para>For more information, take a look at the man page of <command>sysctl</command><indexterm><primary>sysctl</primary></indexterm>.</para>
	<screen>root@debian6~# man sysctl
root@debian6~# sysctl -a 2>/dev/null | grep ip_forward
net.ipv4.ip_forward = 0</screen>
</section>
